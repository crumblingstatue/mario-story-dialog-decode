pub fn kana(hex: u8) -> Option<char> {
    let val = match hex {
        0x00 => 'あ',
        0x01 => 'い',
        0x02 => 'う',
        0x03 => 'え',
        0x04 => 'お',
        0x05 => 'か',
        0x06 => 'き',
        0x07 => 'く',
        0x08 => 'け',
        0x09 => 'こ',
        0x0a => 'さ',
        0x0b => 'し',
        0x0c => 'す',
        0x0d => 'せ',
        0x0e => 'そ',
        0x0f => 'た',
        0x10 => 'ち',
        0x11 => 'つ',
        0x12 => 'て',
        0x13 => 'と',
        0x14 => 'な',
        0x15 => 'に',
        0x16 => 'ぬ',
        0x17 => 'ね',
        0x18 => 'の',
        0x19 => 'は',
        0x1a => 'ひ',
        0x1b => 'ふ',
        0x1c => 'へ',
        0x1d => 'ほ',
        0x1e => 'ま',
        0x1f => 'み',
        0x20 => 'む',
        0x21 => 'め',
        0x22 => 'も',
        0x23 => 'や',
        0x24 => 'ゆ',
        0x25 => 'よ',
        0x26 => 'ら',
        0x27 => 'り',
        0x28 => 'る',
        0x29 => 'れ',
        0x2a => 'ろ',
        0x2b => 'わ',
        0x2c => 'を',
        0x2d => 'ん',
        0x2e => 'ゔ',
        0x2f => 'が',
        0x30 => 'ぎ',
        0x31 => 'ぐ',
        0x32 => 'げ',
        0x33 => 'ご',
        0x34 => 'ざ',
        0x35 => 'じ',
        0x36 => 'ず',
        0x37 => 'ぜ',
        0x38 => 'ぞ',
        0x39 => 'だ',
        0x3a => 'ぢ',
        0x3b => 'づ',
        0x3c => 'で',
        0x3d => 'ど',
        0x3e => 'ば',
        0x3f => 'び',
        0x40 => 'ぶ',
        0x41 => 'べ',
        0x42 => 'ぼ',
        0x43 => 'ぱ',
        0x44 => 'ぴ',
        0x45 => 'ぷ',
        0x46 => 'ぺ',
        0x47 => 'ぽ',
        0x48 => 'ぁ',
        0x49 => 'ぃ',
        0x4a => 'ぅ',
        0x4b => 'ぇ',
        0x4c => 'ょ',
        0x4d => 'っ',
        0x4e => 'ゃ',
        0x4f => 'ゅ',
        0x50 => 'ょ',
        0x51 => 'ア',
        0x52 => 'イ',
        0x53 => 'ウ',
        0x54 => 'エ',
        0x55 => 'オ',
        0x56 => 'カ',
        0x57 => 'キ',
        0x58 => 'ク',
        0x59 => 'ケ',
        0x5a => 'コ',
        0x5b => 'サ',
        0x5c => 'シ',
        0x5d => 'ス',
        0x5e => 'セ',
        0x5f => 'ソ',
        0x60 => 'タ',
        0x61 => 'チ',
        0x62 => 'ツ',
        0x63 => 'テ',
        0x64 => 'ト',
        0x65 => 'ナ',
        0x66 => 'ニ',
        0x67 => 'ヌ',
        0x68 => 'ネ',
        0x69 => 'ノ',
        0x6a => 'ハ',
        0x6b => 'ヒ',
        0x6c => 'フ',
        0x6d => 'ヘ',
        0x6e => 'ホ',
        0x6f => 'マ',
        0x70 => 'ミ',
        0x71 => 'ム',
        0x72 => 'メ',
        0x73 => 'モ',
        0x74 => 'ヤ',
        0x75 => 'ユ',
        0x76 => 'ヨ',
        0x77 => 'ラ',
        0x78 => 'リ',
        0x79 => 'ル',
        0x7a => 'レ',
        0x7b => 'ロ',
        0x7c => 'ワ',
        0x7d => 'ヲ',
        0x7e => 'ン',
        0x7f => 'ヴ',
        0x80 => 'ガ',
        0x81 => 'ギ',
        0x82 => 'グ',
        0x83 => 'ゲ',
        0x84 => 'ゴ',
        0x85 => 'ザ',
        0x86 => 'ジ',
        0x87 => 'ズ',
        0x88 => 'ゼ',
        0x89 => 'ン', // ン with dakuten, can't represent
        0x8a => 'ダ',
        0x8b => 'ヂ',
        0x8c => 'ヅ',
        0x8d => 'デ',
        0x8e => 'ド',
        0x8f => 'バ',
        0x90 => 'ビ',
        0x91 => 'ブ',
        0x92 => 'べ',
        0x93 => 'ボ',
        0x94 => 'パ',
        0x95 => 'ピ',
        0x96 => 'プ',
        0x97 => 'ペ',
        0x98 => 'ポ',
        0x99 => 'ァ',
        0x9A => 'ィ',
        0x9B => 'ゥ',
        0x9C => 'ェ',
        0x9D => 'ォ',
        0x9E => 'ッ',
        0x9F => 'ャ',
        0xA0 => 'ュ',
        0xA1 => 'ョ',
        0xA2 => 'ー',
        0xA3 => '~',
        0xA7 => '０',
        0xA8 => '１',
        0xA9 => '２',
        0xAA => '３',
        0xAB => '４',
        0xAC => '５',
        0xAD => '６',
        0xAE => '７',
        0xAF => '８',
        0xB0 => '９',
        0xB1 => '↑',
        0xB2 => '↓',
        0xB3 => '←',
        0xB4 => '→',
        0xB5 => '！',
        0xB6 => '？',
        0xB7 => '+',
        0xB8 => '-',
        0xB9 => '/',
        0xBA => '.',
        0xBB => '&',
        0xBC => '#',
        0xBD => '\u{2764}', // heavy black heart (single code point heart emoji)
        0xBE => '⭐',
        0xBF => '（',
        0xC0 => '）',
        0xC1 => '「',
        0xC2 => '」',
        0xC3 => '。',
        0xC4 => 'ん', // Supposed to be small ん, but not present in most fonts
        0xC5 => 'ン', // Small ン, representing with normal one
        0xC6 => '星',
        0xF7 => '\u{3000}',
        0xF8 => '\u{3000}', // leading space?
        _ => return None,
    };
    Some(val)
}

pub fn kanji(code: u8) -> Option<char> {
    Some(match code {
        0x00 => '上',
        0x01 => '下',
        0x02 => '左',
        0x03 => '右',
        0x04 => '中',
        0x05 => '東',
        0x06 => '西',
        0x07 => '南',
        0x08 => '北',
        0x09 => '一',
        0x0A => '二',
        0x0B => '三',
        0x0C => '名',
        0x0D => '国',
        0x0E => '城',
        0x0F => '姫',
        0x10 => '大',
        0x11 => '王',
        0x12 => '花',
        0x13 => '世',
        0x14 => '界',
        0x15 => '草',
        0x16 => '気',
        0x17 => '間',
        0x18 => '門',
        0x19 => '家',
        0x1A => '地',
        0x1B => '岩',
        0x1C => '駅',
        0x1D => '山',
        0x1E => '海',
        0x1F => '火',
        0x20 => '水',
        0x21 => '氷',
        0x22 => '日',
        0x23 => '根',
        0x24 => '雲',
        0x25 => '口',
        0x26 => '原',
        0x27 => '前',
        0x28 => '店',
        0x29 => '天',
        0x2A => '森',
        0x2B => '木',
        0x2C => '力',
        0x2D => '空',
        0x2E => '人',
        0x2F => '島',
        0x30 => '出',
        0x31 => '入',
        0x32 => '本',
        0x33 => '石',
        0x34 => '村',
        0x35 => '休',
        0x36 => '先',
        0x37 => '見',
        0x38 => '近',
        0x39 => '方',
        0x3A => '法',
        0x3B => '手',
        0x3C => '紙',
        0x3D => '引',
        0x3E => '場',
        0x3F => '所',
        0x40 => '使',
        0x41 => '回',
        0x42 => '道',
        0x43 => '物',
        0x44 => '弟',
        0x45 => '子',
        0x46 => '汽',
        0x47 => '車',
        0x48 => '何',
        0x49 => '黒',
        0x4A => '分',
        0x4B => '時',
        0x4C => '屋',
        0x4D => '音',
        0x4E => '目',
        0x4F => '行',
        0x50 => '絵',
        0x51 => '月',
        0x52 => '野',
        0x53 => '外',
        0x54 => '図',
        0x55 => '部',
        0x56 => '小',
        0x57 => '風',
        0x58 => '魔',
        0x59 => '元',
        0x5A => '太',
        0x5B => '陽',
        0x5C => '実',
        0x5D => '赤',
        0x5E => '雪',
        0x5F => '谷',
        0x60 => '通',
        0x61 => '○',
        0x62 => 'Ｘ',
        0x63 => '長',
        0x64 => '話',
        0x65 => '色',
        0x66 => '光',
        0x67 => '合',
        0x68 => '青',
        0x69 => '黄',
        0x6A => '🎵',
        0x6B => '当',
        0x6C => '数',
        0x6D => '兄',
        0x6E => '用',
        0x6F => '心',
        0x70 => '今',
        0x71 => '正',
        0x72 => '直',
        0x73 => '全',
        0x74 => '体',
        0x75 => '夜',
        0x76 => '面',
        0x77 => '虫',
        0x78 => 'x',
        0xf0 => '\n',
        0xf2 => '\n',
        0xF7 => '\u{3000}',
        _ => return None,
    })
}

#[test]
fn test_kanji_completeness() {
    for i in 0x00..=0x78 {
        assert!(kanji(i).is_some());
    }
}

#[test]
fn ensure_no_duplicates() {
    let mut set: Vec<char> = (0x00..=0x78).map(|i| kanji(i).unwrap()).collect();
    set.sort();
    let len_before = set.len();
    set.dedup();
    assert_eq!(set.len(), len_before);
}

pub fn latin(code: u8) -> Option<char> {
    Some(match code {
        0x00 => 'Ａ',
        0x01 => 'Ｂ',
        0x02 => 'Ｃ',
        0x03 => 'Ｄ',
        0x04 => 'Ｅ',
        0x05 => 'Ｆ',
        0x06 => 'Ｇ',
        0x07 => 'Ｈ',
        0x08 => 'Ｉ',
        0x09 => 'Ｊ',
        0x0A => 'Ｋ',
        0x0B => 'Ｌ',
        0x0C => 'Ｍ',
        0x0D => 'Ｎ',
        0x0E => 'Ｏ',
        0x0F => 'Ｐ',
        0x10 => 'Ｑ',
        0x11 => 'Ｒ',
        0x12 => 'Ｓ',
        0x13 => 'Ｔ',
        0x14 => 'Ｕ',
        0x15 => 'Ｖ',
        0x16 => 'Ｗ',
        0x17 => 'Ｘ',
        0x18 => 'Ｙ',
        0x19 => 'Ｚ',
        _ => return None,
    })
}

pub fn button(code: u8) -> Option<Button> {
    Some(match code {
        0 => Button::A,
        1 => Button::B,
        2 => Button::Start,
        4 => Button::CDown,
        5 => Button::CLeft,
        7 => Button::Z,
        _ => return None,
    })
}

#[derive(Debug)]
pub enum Button {
    A,
    B,
    CLeft,
    Start,
    CDown,
    Z,
}
